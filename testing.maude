
--- Parameterized view in Full-Maude
--- (view FunAsTriv{X,Y} from TRIV to SET-FUNCTION{X,Y} is
---     sort =>{X,Y} to Elt .
--- endv)
--- This would get us a lot of the way towards higher-order programming

fmod FUNCTION{X :: TRIV, Y :: TRIV} is
    sorts =>{X,Y} .
    op __ : =>{X,Y} X$Elt -> Y$Elt .
endfm

fmod FUNCTION-ID{X :: TRIV} is
    protecting FUNCTION{X,X} .
    op id : -> =>{X,X} .
    var x : X$Elt .
    eq id x = x .
endfm

fmod FUNCTIONS-BETWEEN{X :: TRIV, Y :: TRIV} is
    protecting FUNCTION{X,Y} .
    protecting FUNCTION{Y,X} .
    protecting FUNCTION-ID{X} .
    protecting FUNCTION-ID{Y} .
endfm

fmod FUNCTIONS{X :: TRIV, Y :: TRIV, Z :: TRIV} is
    protecting FUNCTIONS-BETWEEN{X,Y} .
    protecting FUNCTIONS-BETWEEN{X,Z} .
    protecting FUNCTIONS-BETWEEN{Y,Z} .

    op _._ : =>{Y,Z} =>{X,Y} -> =>{X,Z} .

    var f : =>{X,Y} .
    var g : =>{Y,Z} .
    var x : X$Elt .
    eq (g . f) x = g (f x) .
endfm

fmod DATA-MAYBE{a :: TRIV} is
    sort Maybe{a} .
    op Nothing : -> Maybe{a} .
    op Just_ : a$Elt -> Maybe{a} .
endfm

load fm27.maude .

(view Maybe{X :: TRIV} from TRIV to DATA-MAYBE{X} is
    sort Elt to Maybe{X} .
endv)

(view Functions{X :: TRIV, Y :: TRIV} from TRIV to FUNCTIONS-BETWEEN{X,Y} is
    sort Elt to =>{X,Y} .
endv)

(fmod INSTANCE-FUNCTOR-MAYBE{a :: TRIV, b :: TRIV} is
    protecting FUNCTIONS-BETWEEN{a,b} .
    protecting FUNCTIONS-BETWEEN{Maybe{a},Maybe{b}} .
    extending FUNCTIONS-BETWEEN{Functions{a,b},Functions{Maybe{a},Maybe{b}}} .
    op fmap : -> =>{=>{a,b},=>{Maybe{a},Maybe{b}}} .
endfm)


(fmod TESTING is
    protecting BOOL .
    protecting NAT .
    extending INSTANCE-FUNCTOR-MAYBE{Nat, Bool} .

    op even : -> =>{Nat,Bool} .
    op odd : -> =>{Nat,Bool} .

    var N : Nat .

    eq even 0 = true .
    eq even s(0) = false .
    eq even s(s(N)) = even N .

    eq odd 0 = false .
    eq odd s(0) = true .
    eq odd s(s(N)) = odd N .
endfm)
