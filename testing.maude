set include BOOL off .
set include QID off .
set include NAT off .

fmod FUN{X :: TRIV, Y :: TRIV} is
    sort =>{X,Y} .
    op __ : =>{X,Y} X$Elt -> Y$Elt .
endfm

fmod MAP{X :: TRIV, Y :: TRIV} is
    protecting FUN{X, Y} .
    protecting LIST{X} .
    protecting LIST{Y} .
    op map__ : =>{X,Y} List{X} -> List{Y} .

    var XS  : List{X} .
    var X   : X$Elt .
    var f   : =>{X,Y} .

    eq map f (X XS) = (f X) (map f XS) .
    eq map f nil    = nil .
endfm

fmod COMP{X :: TRIV, Y :: TRIV, Z :: TRIV} is
    protecting FUN{X, Y} .
    protecting FUN{Y, Z} .
    protecting FUN{X, Z} .

    op _._ : =>{Y,Z} =>{X,Y} -> =>{X,Z} .

    var F : =>{X,Y} .
    var G : =>{Y,Z} .
    var X : X$Elt .

    eq (G . F) X = G (F X) .
endfm

fmod MYMOD is
    protecting MAP{Nat, Bool} .
    protecting MAP{Bool, Nat} .
    protecting MAP{Bool, Bool} .
    protecting MAP{Nat, Nat} .
    protecting COMP{Nat, Bool, Nat} .

    op toNat : -> =>{Bool, Nat} .
    eq toNat false  = 0 .
    eq toNat true   = 1 .

    var N : Nat .

    op even : -> =>{Nat, Bool} .
    eq even 0           = true .
    eq even 1           = false .
    eq even (s(s(N)))   = even N .

    op odd : -> =>{Nat, Bool} .
    eq odd 0            = false .
    eq odd 1            = true .
    eq odd (s(s(N)))    = odd N .
endfm
